// Code generated by MockGen. DO NOT EDIT.
// Source: url_shortener_uc.go

// Package usecases is a generated GoMock package.
package usecases

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "github.com/yonisaka/urlshortener/api/go/grpc"
	repository "github.com/yonisaka/urlshortener/internal/entities/repository"
)

// GoMockURLShortenerUsecase is a mock of URLShortenerUsecase interface.
type GoMockURLShortenerUsecase struct {
	ctrl     *gomock.Controller
	recorder *GoMockURLShortenerUsecaseMockRecorder
}

// GoMockURLShortenerUsecaseMockRecorder is the mock recorder for GoMockURLShortenerUsecase.
type GoMockURLShortenerUsecaseMockRecorder struct {
	mock *GoMockURLShortenerUsecase
}

// NewGoMockURLShortenerUsecase creates a new mock instance.
func NewGoMockURLShortenerUsecase(ctrl *gomock.Controller) *GoMockURLShortenerUsecase {
	mock := &GoMockURLShortenerUsecase{ctrl: ctrl}
	mock.recorder = &GoMockURLShortenerUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *GoMockURLShortenerUsecase) EXPECT() *GoMockURLShortenerUsecaseMockRecorder {
	return m.recorder
}

// CreateURLShortener mocks base method.
func (m *GoMockURLShortenerUsecase) CreateURLShortener(ctx context.Context, params *repository.CreateURLShortenerParams) (*grpc.URLShortener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateURLShortener", ctx, params)
	ret0, _ := ret[0].(*grpc.URLShortener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateURLShortener indicates an expected call of CreateURLShortener.
func (mr *GoMockURLShortenerUsecaseMockRecorder) CreateURLShortener(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateURLShortener", reflect.TypeOf((*GoMockURLShortenerUsecase)(nil).CreateURLShortener), ctx, params)
}

// GetShortenedURL mocks base method.
func (m *GoMockURLShortenerUsecase) GetShortenedURL(ctx context.Context, params *repository.GetShortenedURLParams) (*grpc.URLShortener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShortenedURL", ctx, params)
	ret0, _ := ret[0].(*grpc.URLShortener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShortenedURL indicates an expected call of GetShortenedURL.
func (mr *GoMockURLShortenerUsecaseMockRecorder) GetShortenedURL(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShortenedURL", reflect.TypeOf((*GoMockURLShortenerUsecase)(nil).GetShortenedURL), ctx, params)
}

// ListURLShortener mocks base method.
func (m *GoMockURLShortenerUsecase) ListURLShortener(ctx context.Context, params *repository.ListURLShortenerParams) (*grpc.ListURLShortenerResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListURLShortener", ctx, params)
	ret0, _ := ret[0].(*grpc.ListURLShortenerResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListURLShortener indicates an expected call of ListURLShortener.
func (mr *GoMockURLShortenerUsecaseMockRecorder) ListURLShortener(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListURLShortener", reflect.TypeOf((*GoMockURLShortenerUsecase)(nil).ListURLShortener), ctx, params)
}
